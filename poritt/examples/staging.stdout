define CU : Code U = [U]
defined CU : Code U = [U]
define U1 : U = ~CU
defined U1 : U = ~CU
define U2 : ~CU = ~CU
defined U2 : ~CU = ~CU
define timely : forall (A : U) -> Code (A -> A) = \ A -> [\ x -> x]
defined timely : forall (A : U) -> Code (A -> A) = \ A -> [\ x -> x]
define twice
  : forall (A : U) -> Code (A -> A) -> Code (A -> A)
  = \ A f -> [\ x -> ~f (~f x)]
defined twice
  : forall (A : U) -> Code (A -> A) -> Code (A -> A)
  = \ A f -> [\ x -> ~f (~f x)]
define Bool : U = {:ff :tt}
defined Bool : U = {:ff :tt}
define true : Bool = :tt
defined true : Bool = :tt
define false : Bool = :ff
defined false : Bool = :ff
define if
  : Bool -> forall (A : U) -> A -> A -> A
  = \ b A t f -> switch b (\ _ -> A) {:ff -> f; :tt -> t}
defined if
  : Bool -> forall (A : U) -> A -> A -> A
  = \ b A t f -> switch b (\ _ -> A) {:ff -> f; :tt -> t}
define not : Bool -> Bool = \ b -> if b Bool false true
defined not : Bool -> Bool = \ b -> if b Bool false true
define twiceid = twice Bool [\ x -> not x]
defined twiceid : Code (Bool -> Bool) = twice Bool [\ x -> not x]
define twiceid! = ~twiceid
defined twiceid! : Bool -> Bool = ~twiceid
define Id
  : forall (A : U) (x : A) (y : A) -> U
  = \ A x y -> forall (C : A -> U) -> C x -> C y
defined Id
  : forall (A : U) -> A -> A -> U
  = \ A x y -> forall (C : A -> U) -> C x -> C y
define refl : forall (A : U) (x : A) -> Id A x x = \ A x C Cx -> Cx
defined refl : forall (A : U) (x : A) -> Id A x x = \ A x C Cx -> Cx
define test : Id (Code Bool) [true] [true] = refl (Code Bool) [true]
defined test : Id (Code Bool) [true] [true] = refl (Code Bool) [true]
define test2 : Id (Code Bool) [true] [not false] = refl (Code Bool) [true]
defined test2 : Id (Code Bool) [true] [not false] = refl (Code Bool) [true]
