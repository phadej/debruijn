include "lib/list.ptt"
include "lib/bool.ptt"

define ex : List Bool
  = cons Bool :true (cons Bool :false (cons Bool :true (cons Bool :false (nil Bool))))
eval ex

-- With macros things are defined more nicely:
define ex' : List Bool
  = %cons :true (%cons :false (%cons :true (%cons :false %nil)))
eval ex'

eval foldr Bool Bool and :true ex
eval foldr Bool Bool or  :false ex


define NP : forall (k : U) (F : k -> U) (xs : List k) -> U
          = \ k F -> foldr k U (\ x acc -> F x * acc) {:tt}

define nilNP  : forall (k : U) (F : k -> U) -> NP k F (nil k) = \ _ _ -> :tt
define consNP : forall (k : U) (F : k -> U) (x : k) (fx : F x) (xs : List k) (fxs : NP k F xs) -> NP k F (cons k x xs)
              = \ k F x fx xs fxs -> fx , fxs

define curryFun : forall (k : U) (F : k -> U) (As : List k) (B : U) -> U
                = \ k F As B -> foldr k U (\ x y -> F x -> y) B As

eval curryFun U (\ x -> x) (cons U {:a :b :c} (cons U {:x :y :z} (nil U))) Bool

define curryNP
  : forall
    (K : U)
    (F : K -> U)
    (xs : List K)
    (B : U)
    (fromNP : NP K F xs -> B)
    -> curryFun K F xs B
  = \ K F xs B ->
    indList K xs (\ xs' -> (NP K F xs' -> B) -> curryFun K F xs' B)
      (\ f -> f :tt)
      (\ k ks Mks f x -> Mks \ xs -> f (x , xs))

eval curryNP U (\ x -> x) (cons U {:a :b :c} (cons U {:x :y :z} (nil U))) Bool
