type Desc
  : U
eval Desc = Desc : U
type `1
  : Desc
eval `1 = `1 : Desc
type `X `1
  : Desc
eval `X `1 = `X `1 : Desc
type `S {:tt} (\ _ -> `1)
  : Desc
eval `S {:tt} (\ _ -> `1) = `S {:tt} (\ _ -> `1) : Desc
define indDescType
  = forall
      (d : Desc)
      (M : Desc -> U)
      (case1 : M `1)
      (caseS : forall
                 (S : U) (D : S -> Desc) (MDs : forall (s : S) -> M (D s)) ->
                 M (`S S D))
      (caseX : forall (D : Desc) (MD : M D) -> M (`X D)) ->
      M d
defined indDescType
  : U
  = forall
      (d : Desc) (M : Desc -> U) ->
      M `1 ->
      (forall
         (S : U) (D : S -> Desc) ->
         (forall (s : S) -> M (D s)) -> M (`S S D)) ->
      (forall (D : Desc) -> M D -> M (`X D)) -> M d
define indDescTerm
  : indDescType
  = \ d M case1 caseS caseX -> indDesc d M case1 caseS caseX
defined indDescTerm
  : indDescType
  = \ d M case1 caseS caseX -> indDesc d M case1 caseS caseX
eval indDescTerm
  = \ d M case1 caseS caseX -> indDesc d M case1 caseS caseX
  : indDescType
eval indDescTerm `1
  = \ M case1 caseS caseX -> case1
  : forall
      (M : Desc -> U) ->
      M `1 ->
      (forall
         (S : U) (D : S -> Desc) ->
         (forall (s : S) -> M (D s)) -> M (`S S D)) ->
      (forall (D : Desc) -> M D -> M (`X D)) -> M `1
eval indDescTerm (`X `1)
  = \ M case1 caseS caseX -> caseX `1 case1
  : forall
      (M : Desc -> U) ->
      M `1 ->
      (forall
         (S : U) (D : S -> Desc) ->
         (forall (s : S) -> M (D s)) -> M (`S S D)) ->
      (forall (D : Desc) -> M D -> M (`X D)) -> M (`X `1)
eval indDescTerm (`S {:tt} (\ _ -> `X `1))
  = \ M case1 caseS caseX -> caseS {:tt} (\ _ -> `X `1) (\ s -> caseX `1 case1)
  : forall
      (M : Desc -> U) ->
      M `1 ->
      (forall
         (S : U) (D : S -> Desc) ->
         (forall (s : S) -> M (D s)) -> M (`S S D)) ->
      (forall (D : Desc) -> M D -> M (`X D)) -> M (`S {:tt} (\ _ -> `X `1))
define idDesc
  : Desc -> Desc
  = \ d -> indDesc d (\ _ -> Desc) `1 (\ S D _ -> `S S D) (\ D _ -> `X D)
defined idDesc
  : Desc -> Desc
  = \ d -> indDesc d (\ _ -> Desc) `1 (\ S D _ -> `S S D) (\ D _ -> `X D)
eval idDesc `1 = `1 : Desc
eval idDesc (`X `1) = `X `1 : Desc
eval idDesc (`S {:tt} (\ _ -> `X `1)) = `S {:tt} (\ _ -> `X `1) : Desc
info evalDesc
defined evalDesc
  : Desc -> U -> U
  = \ d X ->
      indDesc
        d
        (\ _ -> U)
        {:tt}
        (\ S D F -> exists (s : S) * F s)
        (\ D F -> X * F)
define evalDesc'
  : Desc -> U -> U
  = \ d X ->
      indDesc
        d
        (\ _ -> U)
        {:tt}
        (\ S D F -> exists (s : S) * F s)
        (\ D F -> X * F)
defined evalDesc'
  : Desc -> U -> U
  = \ d X ->
      indDesc
        d
        (\ _ -> U)
        {:tt}
        (\ S D F -> exists (s : S) * F s)
        (\ D F -> X * F)
eval evalDesc' (`S {:zz} (\ _ -> `X `1)) = \ X -> {:zz} * X * {:tt} : U -> U
eval evalDesc (`S {:zz} (\ _ -> `X `1)) = \ X -> {:zz} * X * {:tt} : U -> U
info All
defined All
  : forall (D : Desc) (X : U) -> (X -> U) -> evalDesc D X -> U
  = \ D' X P ->
      indDesc
        D'
        (\ D -> evalDesc D X -> U)
        (\ xs -> {:tt})
        (\ S D Dm xs -> Dm (xs .fst) (xs .snd))
        (\ D Dm xs -> P (xs .fst) * Dm (xs .snd))
define All'
  : forall (D : Desc) (X : U) (P : X -> U) (xs : evalDesc D X) -> U
  = \ D' X P ->
      indDesc
        D'
        (\ D -> forall (xs : evalDesc D X) -> U)
        (\ xs -> {:tt})
        (\ S D Dm xs -> Dm (xs .fst) (xs .snd))
        (\ D Dm xs -> P (xs .fst) * Dm (xs .snd))
defined All'
  : forall (D : Desc) (X : U) -> (X -> U) -> evalDesc D X -> U
  = \ D' X P ->
      indDesc
        D'
        (\ D -> evalDesc D X -> U)
        (\ xs -> {:tt})
        (\ S D Dm xs -> Dm (xs .fst) (xs .snd))
        (\ D Dm xs -> P (xs .fst) * Dm (xs .snd))
info all
defined all
  : forall
      (D : Desc) (X : U) (P : X -> U) ->
      (forall (x : X) -> P x) -> forall (xs : evalDesc D X) -> All D X P xs
  = \ D' X P p ->
      indDesc
        D'
        (\ D -> forall (xs : evalDesc D X) -> All D X P xs)
        (\ xs -> :tt)
        (\ S D allD xs -> allD (xs .fst) (xs .snd))
        (\ D allD xs -> p (xs .fst) , allD (xs .snd))
define all'
  : forall
      (D : Desc)
      (X : U)
      (P : X -> U)
      (p : forall (x : X) -> P x)
      (xs : evalDesc D X) ->
      All D X P xs
  = \ D' X P p ->
      indDesc
        D'
        (\ D -> forall (xs : evalDesc D X) -> All D X P xs)
        (\ xs -> :tt)
        (\ S D allD xs -> allD (xs .fst) (xs .snd))
        (\ D allD xs -> p (xs .fst) , allD (xs .snd))
defined all'
  : forall
      (D : Desc) (X : U) (P : X -> U) ->
      (forall (x : X) -> P x) -> forall (xs : evalDesc D X) -> All D X P xs
  = \ D' X P p ->
      indDesc
        D'
        (\ D -> forall (xs : evalDesc D X) -> All D X P xs)
        (\ xs -> :tt)
        (\ S D allD xs -> allD (xs .fst) (xs .snd))
        (\ D allD xs -> p (xs .fst) , allD (xs .snd))
