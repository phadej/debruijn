include "lib/bool.ptt"
include "lib/leibniz.ptt"

define CU : Code U = [| U |]

define U1 : U = $CU
define U2 : $CU = $CU

define timely : forall (A : U) -> Code (A -> A)
              = \ A -> [| \ x -> x |]

define twice : forall (A : U) -> (Code A -> Code A) -> Code (A -> A)
             = \A f -> [| \ x -> $(f (f [| x |])) |]

define twiceid  = twice Bool (\x -> [| not $x |])
define twiceid1 = $twiceid

define twiceid2 = $(twice Bool (\x -> [| not $x |]))

-- Code's are different.
type %refl : Id (Code Bool) [| true |] [| true |]

-- should this work or not?
type %refl : Id (Code Bool) [| true |] [| not false |]
