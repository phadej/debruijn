define I : forall (A : U) -> A -> A = \ _ x -> x
defined I : forall (A : U) -> A -> A = \ _ x -> x

type I
  : forall (A : U) -> A -> A

define K : forall (A : U) (B : U) -> A -> B -> A = \ _ _ x _ -> x
defined K : forall (A : U) (B : U) -> A -> B -> A = \ _ _ x _ -> x

eval K = \ _ _ x _ -> x : forall (A : U) (B : U) -> A -> B -> A

define S
  : forall (A : U) (B : U) (C : U) -> (A -> B -> C) -> (A -> B) -> A -> C
  = \ _ _ _ x y z -> x z (y z)
defined S
  : forall (A : U) (B : U) (C : U) -> (A -> B -> C) -> (A -> B) -> A -> C
  = \ _ _ _ x y z -> x z (y z)

define I2
  : forall (A : U) -> A -> A
  = \ A -> S A (A -> A) A (K A (A -> A)) (K A A)
defined I2
  : forall (A : U) -> A -> A
  = \ A -> S A (A -> A) A (K A (A -> A)) (K A A)

include "lib/leibniz.ptt"

define Id
  : forall (A : U) (x : A) (y : A) -> U
  = \ A x y -> forall (C : A -> U) -> C x -> C y
defined Id
  : forall (A : U) -> A -> A -> U
  = \ A x y -> forall (C : A -> U) -> C x -> C y

define refl : forall (A : U) (x : A) -> Id A x x = \ A x C Cx -> Cx
defined refl : forall (A : U) (x : A) -> Id A x x = \ A x C Cx -> Cx

macro %refl = \ _ Cx -> Cx
macro %refl 
  = \ _ Cx -> Cx

define sym
  : forall (A : U) (x : A) (y : A) -> Id A x y -> Id A y x
  = \ A x y x=y -> x=y (\ z -> Id A z x) (refl A x)
defined sym
  : forall (A : U) (x : A) (y : A) -> Id A x y -> Id A y x
  = \ A x y x=y -> x=y (\ z -> Id A z x) (refl A x)

define trans
  : forall (A : U) (x : A) (y : A) (z : A) -> Id A x y -> Id A y z -> Id A x z
  = \ A x y z x=y y=z -> y=z (\ v -> Id A x v) x=y
defined trans
  : forall (A : U) (x : A) (y : A) (z : A) -> Id A x y -> Id A y z -> Id A x z
  = \ A x y z x=y y=z -> y=z (\ v -> Id A x v) x=y

end-of-file "examples/lib/leibniz.ptt"

type %refl : Id (forall (A : U) -> A -> A) I I2
  : Id (forall (A : U) -> A -> A) I I2

end-of-file "examples/ski.ptt"

